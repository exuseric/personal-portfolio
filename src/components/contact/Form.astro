---
import FormMessage from "@/components/contact/FormMessage.astro";

let success = false;
let showMessage = false;

type FormResponse = {
    success?: boolean;
    message?: string;
    error?: {
        code?: string;
        message?: string;
        [key: string]: any;
    };
};
---

<form class="contact__form">
    <FormMessage success={success} />

    <div class="contact__form_grid">
        <div class="form__field">
            <label for="name">Name</label>
            <div class="input-wrapper">
                <input
                    type="text"
                    id="name"
                    name="name"
                    placeholder="Your name"
                    autocomplete="name"
                    required
                />
            </div>
            <span class="error-message" data-for="name"></span>
        </div>

        <div class="form__field">
            <label for="email"> Email </label>
            <input
                type="email"
                name="email"
                id="email"
                placeholder="e.g. user@example.com"
                autocomplete="email"
                pattern="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
                title="Please enter a valid email address"
                required
            />
            <span class="error-message" data-for="email">
                Please enter a valid email address (e.g. user@example.com)
            </span>
        </div>
    </div>

    <div class="form__field">
        <label for="message">Message</label>
        <div class="textarea-wrapper">
            <textarea
                id="message"
                name="message"
                rows="4"
                placeholder="Tell me about your project"
                required></textarea>
        </div>
        <span class="error-message" data-for="message"></span>
    </div>

    <button class="btn btn--primary" type="submit">
        <span class="btn-text">Send Message</span>
    </button>
</form>

<script>
import { actions } from "astro:actions";

const submitButtonTextContent = {
    submitting: "Sending Message...",
    success: "Message Sent!",
    error: "There was an error sending your message. Please try again.",
    default: "Send Message",
} as const;

document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector(".contact__form") as HTMLFormElement;
    const formSubmitBtn = document.querySelector("button[type='submit']") as HTMLButtonElement;
    const formStatus = document.querySelector(".form_message") as HTMLDivElement;

    // Hide the form status message initially
    formStatus.setAttribute("hidden", "");

    form.addEventListener("submit", async (event: SubmitEvent) => {
        event.preventDefault();
        formSubmitBtn.textContent = submitButtonTextContent.submitting;
        formStatus.toggleAttribute("hidden");

        // create a FormData object from the form
        const formData = new FormData(form);

        // send the form data to the server
        const {data, error} = await actions.sendFeedback(formData);
        
        // Handle submission success
        if (data?.success) {
            formSubmitBtn.textContent = submitButtonTextContent.success;
            formStatus.setAttribute("data-success", "true");
            
            setTimeout(() => {
                formSubmitBtn.textContent = submitButtonTextContent.default;
                formStatus.toggleAttribute("hidden");
                formStatus.setAttribute("data-success", "false");
            }, 5000);
            
            form.reset();
        }

        // Handle submission error
        if (error) {
            formSubmitBtn.textContent = submitButtonTextContent.error;
            formStatus.setAttribute("data-succes", "false")
            formStatus.setAttribute("data-error", "true")
            
            setTimeout(() => {
                formSubmitBtn.textContent = submitButtonTextContent.default;
                formStatus.toggleAttribute("hidden");
                formStatus.setAttribute("data-error", "false");
            }, 5000);
        }
    });
})
</script>

<style>
.contact__form {
    display: flex;
    flex-direction: column;
    gap: var(--space-4);
    width: 100%;
    /* max-width: 400px; */
    margin-block: var(--space-8);
    position: relative;
}

.contact__form_grid {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: auto;
    gap: var(--space-4);
}

@media (min-width: 768px) {
    .contact__form_grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

.contact__form label {
    display: block;
    margin-bottom: var(--space-1);
    font-weight: 500;
}

.contact__form input,
.contact__form textarea {
    anchor-name: --form-input;
    display: block;
    width: 100%;
    padding: var(--space-2);

    background-color: transparent;

    border: 1px solid transparent;
    border-bottom-color: var(--color-border);
    border-radius: var(--border-radius);

    transition: border-color 0.2s ease;
}

/* .contact__form input:focus,
.contact__form textarea:focus {
    outline: none;
    border-color: var(--color-brand);
    box-shadow: 0 0 0 2px rgba(var(--color-brand-rgb), 0.2);
} */

input[type="email"] {
    anchor-name: --email-input;
}

.contact__form button {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-height: 44px;
}

.contact__form button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

.contact__form input:user-invalid,
.contact__form textarea:user-invalid {
    border-color: var(--color-error, #dc3545);
}

.error-message {
    display: none;
    visibility: hidden;
    opacity: 0;
    
    position: absolute;
    color: var(--color-error, #dc3545);
    font-size: 0.875rem;
    margin-top: var(--space-1);
    transition-behavior: allow-discrete;
    transition: display var(--exit-transition-medium);
}

.error-message[data-for="email"] {
    top: anchor( --email-input bottom);
}

.error-message.active {
    display: block;
}

.error-details {
    font-size: 0.875rem;
    margin-top: var(--space-2);
}

input:invalid:not(:placeholder-shown):focus + .error-message {
    display: block;
    opacity: 1;
    visibility: visible;
    padding: var(--space-2);

    color: oklch(from var(--color-brand) l c 100);
    background-color: oklch(from var(--color-brand) l c 100 / 5%);
    transition: display var(--entry-transition-medium), opacity var(--entry-transition-medium), visibility var(--entry-transition-medium), padding var(--entry-transition-medium);
}
input:invalid:not(:placeholder-shown):focus {
    outline: 2px solid oklch(from var(--color-brand) calc(l + 0.2) c 100);
    background-color: oklch(from var(--color-brand) l c 100 / 5%);
}

input:valid:not(:placeholder-shown):focus + .error-message {
    display: none;
}

input:valid:not(:placeholder-shown):focus {
    outline:2px solid oklch(from var(--color-brand) l c 140);
    background-color: oklch(from var(--color-brand) l c 140 / 5%);
}
</style>
