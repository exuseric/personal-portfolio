---
import { Icon } from "astro-iconify";
import SocialButtons from "./SocialButtons.astro";
// import style from "./navigation.module.css";
import data from "@/data/navigation.json";
import Button from "@/components/Button/Button.astro";
import IconButton from "@/components/Button/IconButton.astro";

const { nav } = data;
---

<div class:list={["nav__actions"]}>
    <SocialButtons />
    {
        nav.cta && (
            <Button
                as="default"
                href={nav.cta.url}
                label={nav.cta.label}
                variant="primary"
                class:list={["nav__link", "nav__linkCta"]}
            />
        )
    }
    <div class:list={["nav__toggleWrapper"]}>
        <Button
            as="icon-only"
            variant="default"
            iconName="mingcute:menu-fill"
            ariaLabel="Open menu"
            classList={["nav__toggle"]}
            attributes={{
                dataset: {
                    toggleMenu: true,
                    isMenuVisible: false,
                    isVisible: true,
                    toggleAction: "open"
                },
                attributes: {
                    ariaExpanded: false,
                },
            }}
        />
        <Button
            as="icon-only"
            variant="default"
            iconName="material-symbols:close-rounded"
            ariaLabel="Close menu"
            classList={["nav__toggle"]}
            attributes={{
                dataset: {
                    toggleMenu: true,
                    isMenuVisible: false,
                    isVisible: false,
                    toggleAction: "close"
                },
                attributes: {
                    ariaExpanded: false,
                },
            }}
        />
    </div>
</div>

<style></style>

<script>
    function handleMenu(button: HTMLButtonElement) {
        const toggleAction = button.dataset.toggleAction
        const isMenuVisible = button.dataset.isMenuVisible === "true";
        let state;

        if(toggleAction === "open") state = true;
        if(toggleAction === "close") state = false;
        
        button.dataset.isMenuVisible = String(state);
        button.setAttribute("aria-expanded", String(state));

        button.dispatchEvent(
            new CustomEvent("ToggleMenu", {
                bubbles: true,
                cancelable: true,
                detail: { state },
            }),
        );
    }

    function handleButtons(
        buttons: NodeListOf<HTMLButtonElement>,
        button: HTMLButtonElement,
    ) {
        const isButtonVisible = button.dataset.isVisible === "true";
        const state = !isButtonVisible;

        button.dataset.isVisible = String(state);

        buttons.forEach((otherBtn) => {
            if (otherBtn !== button) {
                otherBtn.dataset.isVisible = String(!state);
                button.dataset.isVisible = String(state);
                console.log(otherBtn);
            }
        });
    }

    window.addEventListener("DOMContentLoaded", () => {
        const toggleButtons = document.querySelectorAll(
            '[data-toggle-menu="true"]',
        ) as NodeListOf<HTMLButtonElement>;

        toggleButtons.forEach((button) => {
            button.addEventListener("click", () => {
                handleButtons(toggleButtons, button);
                handleMenu(button);
            });
        });
    });
</script>
