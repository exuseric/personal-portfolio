---
import { getContent } from "@/utils/graphql-client"
import { contactQuery } from "@/utils/queries"
import Form from "@/components/contact/Form.astro"

const response = await getContent(contactQuery)
const { heading, content } = response.contact
---

<section class="contact container" id="contact" data-parent-container data-cutout>
    <div class="contact__wrapper container" data-container-md>
        <header class="contact__header full-width">
            <h2 class="h1 full-width contactHeading">
                {heading}
            </h2>
            <article>
                <Fragment set:html={content.html} />
            </article>
        </header>
        <div class="contact__formWrapper">
            <Form />
        </div>
    </div>
</section>

<style>
    .contact {
        padding-block: var(--container-padding-block);
    }

    .contact__header {
        display: flex;
        flex-direction: column;
        gap: var(--size-2);
    }

    .contact__wrapper {
        row-gap: var(--size-12);
    }

    article {
        display: flex;
        flex-direction: column;
        gap: var(--size-1);
        color: var(--text-neutral-default);
    }
</style>

<script>
    import { gsap } from "gsap"
    import { ScrollTrigger, SplitText } from "gsap/all"

    document.addEventListener("DOMContentLoaded", (e) => {
        gsap.registerPlugin(SplitText, ScrollTrigger)

        let contactHeading = new SplitText(".contactHeading", { type: "lines, chars", linesClass: "lines++" })

        let tl = gsap.timeline({
            scrollTrigger: {
                trigger: ".projects",
                endTrigger: ".projects",
                start: "50% top",
                end: "bottom top",
                scrub: true,
            },
        })

        tl.from(contactHeading.words, {
            yPercent: "random([-50, 50])",
            rotation: "random([-10, 10])",
            autoAlpha: 0,
            ease: "back.out",
            stagger: {
                amount: 0.5,
                from: "random",
            },
        })
            .from(contactHeading.chars, {
                yPercent: "random([-200, 200])",
                rotation: "random([-10, 10])",
                autoAlpha: 0,
                ease: "back.out",
                stagger: {
                    amount: 0.5,
                    from: "random",
                },
            })
            .to(".lines3", {
                backgroundColor: "var(--surface-brand-subtle)",
                rotation: "-1",
                paddingInline: "var(--size-4)",
                borderRadius: "var(--radius-lg)",
                width: "max-content",
                ease: "power1.in",
                stagger: {
                    amount: 0.5,
                },
            })
    })
</script>
